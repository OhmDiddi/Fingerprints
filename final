import cv2
import os

def preprocess_image(image):
    # Convert image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Apply Gaussian blur to reduce noise
    blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
    # Thresholding to segment ballot elements
    _, thresholded_image = cv2.threshold(blurred_image, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    # Convert to appropriate data type
    thresholded_image = thresholded_image.astype('uint8')
    return thresholded_image

def detect_alterations(original_image, processed_image):
    # Convert original image to grayscale
    original_gray = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
    # Match template of original image onto processed image
    result = cv2.matchTemplate(processed_image, original_gray, cv2.TM_CCOEFF_NORMED)
    # Threshold the result to identify areas of significant difference
    _, thresholded_result = cv2.threshold(result, 0.8, 255, cv2.THRESH_BINARY)
    return thresholded_result

def process_image(image_path):
    # Load image
    image = cv2.imread(image_path)

    if image is None:
        print(f"Error: Failed to load the image {image_path}.")
        return None, None, None

    print("Original Image Dimensions:", image.shape[:2])

    # Preprocess image
    processed_image = preprocess_image(image)

    print("Processed Image Dimensions before resizing:", processed_image.shape[:2])

    # Detect alterations
    alterations_image = detect_alterations(image, processed_image)

    if alterations_image is None:
        print("Error: Failed to detect alterations.")
        return None, None, None

    # Check if alterations were detected
    alterations_detected = cv2.countNonZero(alterations_image) > 0

    return processed_image, alterations_image, alterations_detected

def main():
    # Change directory to where the images are located
    images_directory = r"C:\Users\thick\Fingerprints\Ballots"

    # Process each image
    for i in range(1, 11):
        image_path = os.path.join(images_directory, f"ballot {i}.jpg")
        print(f"Processing image: {image_path}")
        processed_image, alterations_image, alterations_detected = process_image(image_path)

        if processed_image is not None and alterations_image is not None:
            # Show results
            cv2.imshow('Processed Image', processed_image)
            cv2.imshow('Alterations', alterations_image)
            cv2.waitKey(0)  # Wait indefinitely until a key is pressed
            cv2.destroyAllWindows()

            # Print whether alterations were detected
            if alterations_detected:
                print("Alterations Detected")
            else:
                print("No Alterations Detected")

if __name__ == "__main__":
    main()
